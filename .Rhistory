REC_lagRESULT = window(zoo.C_lag0[,1], start = start(zoo.C_lagRESULT), end = end(zoo.C_lagRESULT))
train_start = start(zoo.C_lagRESULT)
if(manual_end == FALSE)
{
train_end = warning_train_end(country, input_end)
}
else
{
train_end = input_end
}
test_start = as.Date(train_end) + months(h+1)
test_end = end(zoo.C_lagRESULT)
run = elapsed_months(test_end, test_start)
#Create prediction vector
pred_final = vector("numeric")
#Time
ptm <- proc.time()
iters <- sum(run,1)
for(i in 1:iters)
{
#Get zoo from 1 to 180, then 2 to 182, then 3 to 183 all the way to run + window so like 10 to 190
start_shift  <- months(i-1) + as.Date(train_start)
end_shift <- months(i-1) + as.Date(train_end)
zoo.C_shift =  window(zoo.C_lagRESULT, start = start_shift, end = end_shift)
REC_shift = window(REC_lagRESULT, start = start_shift, end = end_shift)
zoo.C_predict = window(zoo.C_lagRESULT, start = (as.Date(test_start)+months(i-1)), end = (as.Date(test_start)+months(i-1)))
glm.C = eval(substitute(glm(REC_shift ~ zoo.C_shift[,varname], family = "binomial"), list(variable = as.name(varname))))
#Forecast starting at test_start
pred_final[i] =  predict.glm(glm.C,
zoo.C_predict,
type="response")
if(i %% 10 == 0)
{
cat(i)
}
}
#Print how long it took for ALL the run
time_spent = proc.time() - ptm
#Convert into time series object
from <- as.Date(test_start)
to <- as.Date(test_start) + months(run)
months <- seq.Date(from=from,to=to,by="month")
zoo.pred = zoo(pred_final, months)
#   zoo.pos = zoo(pos_var, months)
zoo.REC = window(REC_lagRESULT,
start = start(zoo.pred),
end=end(zoo.pred),
frequency = 12)
#Plot Prediction Against ACTUAL Recession
plot(zoo.REC, col = "blue", ylab = "Prob. of Recession", axes = FALSE)
par(new=TRUE)
plot(zoo.pred, col = "red", ylab = "Prob. of Recession",
main = paste(c, ":", varname, "GLM Rolling Forecast",h,"Months"),
axes = TRUE,
ylim=c(0,1))
#Return Prediction, Final Score, CV,Score and Ideally ROC
return(list(zoo.REC,
zoo.pred,
roc(zoo.REC,zoo.pred),
time_spent))
}
#GLM ALL Out-Of-Sample or ALL Roll
glm.out_roll_all <-function(zoo.C_lag0, h = 3, c, graph_param = FALSE, all_col = TRUE, model = 1)
{
name_all = colnames(zoo.C_lag0)[2:ncol(zoo.C_lag0)]
df.store_all = data.frame(NAME = name_all, ROC_SCORE = 0)
if(all_col == TRUE)
{
total = length(name_all)
}
else
{
total = 3
}
ptm <- proc.time()
#In-Sample ALL
if(model == 0 )
{
for(i in 1:total)
{
glm.in_model = glm.roc_in(zoo.C_lag0, forecast = h, country = c, varname = name_all[i])
#df.store_all[,name_all[i]] =
df.store_all[df.store_all$NAME == name_all[i],"ROC_SCORE"] = as.numeric(glm.in_model[9])
if(i %% 10 == 0)
{cat(i)}
}
}
#Out-Sample Standard
else if(model == 1)
{
for(i in 1:total)
{
glm.out_model = glm.out(zoo.C_lag0, forecast = h, country = c, varname = name_all[i], input_end = end, graph = graph_param)
#df.store_all[,name_all[i]] =
df.store_all[df.store_all$NAME == name_all[i],"ROC_SCORE"] = as.numeric(glm.out_model[9])
if(i %% 10 == 0)
{cat(i)}
}
}
#Out-Sample Rolling
else if(model == 2)
{
for(i in 1:total)
{
glm.out_model = glm.roc_roll(zoo.C_lag0, forecast = h, country = c, varname = name_all[i], graph = graph_param)
#df.store_all[,name_all[i]] =
df.store_all[df.store_all$NAME == name_all[i],"ROC_SCORE"] = as.numeric(glm.out_model[9])
if(i %% 10 == 0)
{cat(i)}
}
}
else
{
stop("umm model only goes 0,1,2")
}
time_spent = proc.time() - ptm
print(time_spent)
#df.store_all = df.store_all[order(df.store_all[,1], decreasing = TRUE),]
df.store_all = df.store_all[order(df.store_all[,2]),]
return(df.store_all)
}
#GLM Out-Of-Sample Standard
glm.out <- function(zoo.C_lag0, forecast = 0, country, varname = "PMP", input_end = "1985-08-01", logit = "TRUE", graph = "TRUE")
{
forward <- sum(-1,-forecast)
train_start = start(zoo.C_lag0)
train_end = warning_train_end(country, input_end)
#train_end = end_train
test_start = train_end
test_end = end(zoo.C_lag0)
zoo.C_train = window(zoo.C_lag0, start = train_start, end=train_end)
zoo.C_test = window(zoo.C_lag0, start = test_start, end=test_end)
if(logit == "TRUE")
{
model = "logit"
}
else
{
model = "probit"
}
if(country == "US")
{
glm.C_os = eval(substitute(
dyn$glm(USRECD ~ lag(variable,forward),
data = zoo.C_train,
family = binomial(link = model)),
list(variable = as.name(varname)))
)
pred_os = predict(glm.C_os,
newdata = zoo.C_test,
type="response")
zoo.REC = window(zoo.C_lag0$USRECD,
start = start(pred_os),
end=end(pred_os),
frequency = 12)
}
else if(country == "JP")
{
glm.C_os = eval(substitute(
dyn$glm(JAPRECD ~ lag(variable,forward),
data = zoo.C_train,
family = binomial(link = "probit")),
list(variable = as.name(varname)))
)
pred_os = predict(glm.C_os,
newdata = zoo.C_test,
type="response")
zoo.REC = window(zoo.C_lag0$JAPRECD,
start = start(pred_os),
end=end(pred_os),
frequency = 12)
}
else
{
stop("Uh oh, no country specified or incorrect spelling")
}
if(graph == TRUE)
{
plot(zoo.REC, col = "blue", ylab = "Prob. of Recession", axes = FALSE)
par(new=TRUE)
plot(pred_os, ylab = "Prob. of Recession", main = paste(country, ":", varname,"GLM out Forecast",forecast,"Months"), axes = TRUE, ylim=c(0,1))
}
return(roc(zoo.REC,pred_os))
}
glm.out_roll_all_JP_h3_medium = glm.out_roll_all(zoo.JP_lag0_medium, h = 3, c = "JP", graph = FALSE, all_col = TRUE, model = 2)
glm.roc_roll <- function(zoo.C_lag0, varname = "PMNO", forecast = 0, country, input_end = "1985-08-01", graph = TRUE, manual_end = FALSE)
{
h = forecast
c = country
horizon = h + 1
#Lag h+1,h+2,...,h+d
zoo.C_lagRESULT = (na.omit(merge(lag(zoo.C_lag0[,2:ncol(zoo.C_lag0)], k = -horizon))))
#Need to get Recession Information because not included in Lags
REC_lagRESULT = window(zoo.C_lag0[,1], start = start(zoo.C_lagRESULT), end = end(zoo.C_lagRESULT))
train_start = start(zoo.C_lagRESULT)
if(manual_end == FALSE)
{
train_end = warning_train_end(country, input_end)
}
else
{
train_end = input_end
}
test_start = as.Date(train_end) + months(h+1)
test_end = end(zoo.C_lagRESULT)
run = elapsed_months(test_end, test_start)
#Create prediction vector
pred_final = vector("numeric")
#Time
ptm <- proc.time()
iters <- sum(run,1)
for(i in 1:iters)
{
#Get zoo from 1 to 180, then 2 to 182, then 3 to 183 all the way to run + window so like 10 to 190
start_shift  <- months(i-1) + as.Date(train_start)
end_shift <- months(i-1) + as.Date(train_end)
zoo.C_shift =  window(zoo.C_lagRESULT, start = start_shift, end = end_shift)
REC_shift = window(REC_lagRESULT, start = start_shift, end = end_shift)
zoo.C_predict = window(zoo.C_lagRESULT, start = (as.Date(test_start)+months(i-1)), end = (as.Date(test_start)+months(i-1)))
glm.C = eval(substitute(glm(REC_shift ~ zoo.C_shift[,varname], family = "binomial"), list(variable = as.name(varname))))
#Forecast starting at test_start
pred_final[i] =  predict.glm(glm.C,
zoo.C_predict,
type="response")
if(i %% 10 == 0)
{
cat(i)
}
}
#Print how long it took for ALL the run
time_spent = proc.time() - ptm
#Convert into time series object
from <- as.Date(test_start)
to <- as.Date(test_start) + months(run)
months <- seq.Date(from=from,to=to,by="month")
zoo.pred = zoo(pred_final, months)
#   zoo.pos = zoo(pos_var, months)
zoo.REC = window(REC_lagRESULT,
start = start(zoo.pred),
end=end(zoo.pred),
frequency = 12)
#Plot Prediction Against ACTUAL Recession
plot(zoo.REC, col = "blue", ylab = "Prob. of Recession", axes = FALSE)
par(new=TRUE)
plot(zoo.pred, col = "red", ylab = "Prob. of Recession",
main = paste(c, ":", varname, "GLM Rolling Forecast",h,"Months"),
axes = TRUE,
ylim=c(0,1))
#Return Prediction, Final Score, CV,Score and Ideally ROC
return(roc(zoo.REC,zoo.pred))
}
glm.out_roll_all_JP_h3_medium = glm.out_roll_all(zoo.JP_lag0_medium, h = 3, c = "JP", graph = FALSE, all_col = TRUE, model = 2)
glm.out_roll_all_JP_h3_medium = glm.out_roll_all(zoo.JP_lag0_medium, h = 3, c = "JP", graph = FALSE, all_col = TRUE, model = 2, graph_param = FALSE)
glm.out_roll_all_JP_h3_medium = glm.out_roll_all(zoo.JP_lag0_medium, h = 3, c = "JP", all_col = TRUE, model = 2, graph_param = FALSE)
##GLM Rolling Estimation
glm.roc_roll <- function(zoo.C_lag0, varname = "PMNO", forecast = 0, country, input_end = "1985-08-01", graph = TRUE, manual_end = FALSE)
{
h = forecast
c = country
horizon = h + 1
#Lag h+1,h+2,...,h+d
zoo.C_lagRESULT = (na.omit(merge(lag(zoo.C_lag0[,2:ncol(zoo.C_lag0)], k = -horizon))))
#Need to get Recession Information because not included in Lags
REC_lagRESULT = window(zoo.C_lag0[,1], start = start(zoo.C_lagRESULT), end = end(zoo.C_lagRESULT))
train_start = start(zoo.C_lagRESULT)
if(manual_end == FALSE)
{
train_end = warning_train_end(country, input_end)
}
else
{
train_end = input_end
}
test_start = as.Date(train_end) + months(h+1)
test_end = end(zoo.C_lagRESULT)
run = elapsed_months(test_end, test_start)
#Create prediction vector
pred_final = vector("numeric")
#Time
ptm <- proc.time()
iters <- sum(run,1)
for(i in 1:iters)
{
#Get zoo from 1 to 180, then 2 to 182, then 3 to 183 all the way to run + window so like 10 to 190
start_shift  <- months(i-1) + as.Date(train_start)
end_shift <- months(i-1) + as.Date(train_end)
zoo.C_shift =  window(zoo.C_lagRESULT, start = start_shift, end = end_shift)
REC_shift = window(REC_lagRESULT, start = start_shift, end = end_shift)
zoo.C_predict = window(zoo.C_lagRESULT, start = (as.Date(test_start)+months(i-1)), end = (as.Date(test_start)+months(i-1)))
glm.C = eval(substitute(glm(REC_shift ~ zoo.C_shift[,varname], family = "binomial"), list(variable = as.name(varname))))
#Forecast starting at test_start
pred_final[i] =  predict.glm(glm.C,
zoo.C_predict,
type="response")
#if(i %% 10 == 0)
#{
#  cat(i)
#}
}
#Print how long it took for ALL the run
time_spent = proc.time() - ptm
#Convert into time series object
from <- as.Date(test_start)
to <- as.Date(test_start) + months(run)
months <- seq.Date(from=from,to=to,by="month")
zoo.pred = zoo(pred_final, months)
#   zoo.pos = zoo(pos_var, months)
zoo.REC = window(REC_lagRESULT,
start = start(zoo.pred),
end=end(zoo.pred),
frequency = 12)
#Plot Prediction Against ACTUAL Recession
plot(zoo.REC, col = "blue", ylab = "Prob. of Recession", axes = FALSE)
par(new=TRUE)
plot(zoo.pred, col = "red", ylab = "Prob. of Recession",
main = paste(c, ":", varname, "GLM Rolling Forecast",h,"Months"),
axes = TRUE,
ylim=c(0,1))
#Return Prediction, Final Score, CV,Score and Ideally ROC
return(roc(zoo.REC,zoo.pred))
}
glm.out_roll_all_JP_h3_medium = glm.out_roll_all(zoo.JP_lag0_medium, h = 3, c = "JP", all_col = TRUE, model = 2, graph_param = FALSE)
glm.out_roll_all <-function(zoo.C_lag0, h = 3, c, graph_param = FALSE, all_col = TRUE, model = 1)
{
name_all = colnames(zoo.C_lag0)[2:ncol(zoo.C_lag0)]
df.store_all = data.frame(NAME = name_all, ROC_SCORE = 0)
if(all_col == TRUE)
{
total = length(name_all)
}
else
{
total = 3
}
ptm <- proc.time()
#In-Sample ALL
if(model == 0 )
{
for(i in 1:total)
{
glm.in_model = glm.roc_in(zoo.C_lag0, forecast = h, country = c, varname = name_all[i])
#df.store_all[,name_all[i]] =
df.store_all[df.store_all$NAME == name_all[i],"ROC_SCORE"] = as.numeric(glm.in_model[9])
if(i %% 10 == 0)
{cat(i)}
}
}
#Out-Sample Standard
else if(model == 1)
{
for(i in 1:total)
{
glm.out_model = glm.out(zoo.C_lag0, forecast = h, country = c, varname = name_all[i], input_end = end, graph = graph_param)
#df.store_all[,name_all[i]] =
df.store_all[df.store_all$NAME == name_all[i],"ROC_SCORE"] = as.numeric(glm.out_model[9])
if(i %% 10 == 0)
{cat(i)}
}
}
#Out-Sample Rolling
else if(model == 2)
{
for(i in 1:total)
{
glm.out_model = glm.roc_roll(zoo.C_lag0, forecast = h, country = c, varname = name_all[i], graph = graph_param)
#df.store_all[,name_all[i]] =
df.store_all[df.store_all$NAME == name_all[i],"ROC_SCORE"] = as.numeric(glm.out_model[9])
if(i %% 2 == 0)
{cat(i)}
}
}
else
{
stop("umm model only goes 0,1,2")
}
time_spent = proc.time() - ptm
print(time_spent)
#df.store_all = df.store_all[order(df.store_all[,1], decreasing = TRUE),]
df.store_all = df.store_all[order(df.store_all[,2]),]
return(df.store_all)
}
glm.out_all_JP_h3 = glm.out_roll_all(zoo.JP_lag0_big, h = 3, c = "JP", graph_param = FALSE, all_col = TRUE, model = 1)
glm.roc_roll <- function(zoo.C_lag0, varname = "PMNO", forecast = 0, country, input_end = "1985-08-01", graph = TRUE, manual_end = FALSE)
{
h = forecast
c = country
horizon = h + 1
#Lag h+1,h+2,...,h+d
zoo.C_lagRESULT = (na.omit(merge(lag(zoo.C_lag0[,2:ncol(zoo.C_lag0)], k = -horizon))))
#Need to get Recession Information because not included in Lags
REC_lagRESULT = window(zoo.C_lag0[,1], start = start(zoo.C_lagRESULT), end = end(zoo.C_lagRESULT))
train_start = start(zoo.C_lagRESULT)
if(manual_end == FALSE)
{
train_end = warning_train_end(country, input_end)
}
else
{
train_end = input_end
}
test_start = as.Date(train_end) + months(h+1)
test_end = end(zoo.C_lagRESULT)
run = elapsed_months(test_end, test_start)
#Create prediction vector
pred_final = vector("numeric")
#Time
ptm <- proc.time()
iters <- sum(run,1)
for(i in 1:iters)
{
#Get zoo from 1 to 180, then 2 to 182, then 3 to 183 all the way to run + window so like 10 to 190
start_shift  <- months(i-1) + as.Date(train_start)
end_shift <- months(i-1) + as.Date(train_end)
zoo.C_shift =  window(zoo.C_lagRESULT, start = start_shift, end = end_shift)
REC_shift = window(REC_lagRESULT, start = start_shift, end = end_shift)
zoo.C_predict = window(zoo.C_lagRESULT, start = (as.Date(test_start)+months(i-1)), end = (as.Date(test_start)+months(i-1)))
glm.C = eval(substitute(glm(REC_shift ~ zoo.C_shift[,varname], family = "binomial"), list(variable = as.name(varname))))
#Forecast starting at test_start
pred_final[i] =  predict.glm(glm.C,
zoo.C_predict,
type="response")
#if(i %% 10 == 0)
#{
#  cat(i)
#}
}
#Print how long it took for ALL the run
time_spent = proc.time() - ptm
#Convert into time series object
from <- as.Date(test_start)
to <- as.Date(test_start) + months(run)
months <- seq.Date(from=from,to=to,by="month")
zoo.pred = zoo(pred_final, months)
#   zoo.pos = zoo(pos_var, months)
zoo.REC = window(REC_lagRESULT,
start = start(zoo.pred),
end=end(zoo.pred),
frequency = 12)
if(graph == TRUE)
{
#Plot Prediction Against ACTUAL Recession
plot(zoo.REC, col = "blue", ylab = "Prob. of Recession", axes = FALSE)
par(new=TRUE)
plot(zoo.pred, col = "red", ylab = "Prob. of Recession",
main = paste(c, ":", varname, "GLM Rolling Forecast",h,"Months"),
axes = TRUE,
ylim=c(0,1))
}
#Return Prediction, Final Score, CV,Score and Ideally ROC
return(roc(zoo.REC,zoo.pred))
}
#GLM ALL Out-Of-Sample or ALL Roll
glm.out_roll_all <-function(zoo.C_lag0, h = 3, c, graph_param = FALSE, all_col = TRUE, model = 1)
{
name_all = colnames(zoo.C_lag0)[2:ncol(zoo.C_lag0)]
df.store_all = data.frame(NAME = name_all, ROC_SCORE = 0)
if(all_col == TRUE)
{
total = length(name_all)
}
else
{
total = 3
}
ptm <- proc.time()
#In-Sample ALL
if(model == 0 )
{
for(i in 1:total)
{
glm.in_model = glm.roc_in(zoo.C_lag0, forecast = h, country = c, varname = name_all[i])
#df.store_all[,name_all[i]] =
df.store_all[df.store_all$NAME == name_all[i],"ROC_SCORE"] = as.numeric(glm.in_model[9])
if(i %% 10 == 0)
{cat(i)}
}
}
#Out-Sample Standard
else if(model == 1)
{
for(i in 1:total)
{
glm.out_model = glm.out(zoo.C_lag0, forecast = h, country = c, varname = name_all[i], input_end = end, graph = graph_param)
#df.store_all[,name_all[i]] =
df.store_all[df.store_all$NAME == name_all[i],"ROC_SCORE"] = as.numeric(glm.out_model[9])
if(i %% 10 == 0)
{cat(i)}
}
}
#Out-Sample Rolling
else if(model == 2)
{
for(i in 1:total)
{
glm.out_model = glm.roc_roll(zoo.C_lag0, forecast = h, country = c, varname = name_all[i], graph = graph_param)
#df.store_all[,name_all[i]] =
df.store_all[df.store_all$NAME == name_all[i],"ROC_SCORE"] = as.numeric(glm.out_model[9])
if(i %% 2 == 0)
{cat(i)}
}
}
else
{
stop("umm model only goes 0,1,2")
}
time_spent = proc.time() - ptm
print(time_spent)
#df.store_all = df.store_all[order(df.store_all[,1], decreasing = TRUE),]
df.store_all = df.store_all[order(df.store_all[,2]),]
return(df.store_all)
}
glm.out_roll_all_JP_h3_medium = glm.out_roll_all(zoo.JP_lag0_medium, h = 3, c = "JP", all_col = TRUE, model = 2, graph_param = FALSE)
