{
cat(i)
#save(pred_final, file = "~/Google Drive/Independent Work/Saved RData/save_pred_recent_gbm_roll.RData")
}
}
#Print how long it took for ALL the run
time_spent = proc.time() - ptm
#Convert the prediction into a zoo object
from <- as.Date(test_start)
to <- as.Date(test_start) + months(run)
months <- seq.Date(from=from,to=to,by="month")
zoo.pred = zoo(pred_final, months)
#Zoo object should mimic the time period of the predictino output
zoo.REC = window(REC_lagRESULT,
start = start(zoo.pred),
end=end(zoo.pred),
frequency = 12)
#Plot Prediction Against ACTUAL Recession
plot(zoo.REC, col = "blue", ylab = "Prob. of Recession", axes = FALSE)
par(new=TRUE)
plot(zoo.pred, col = "red", ylab = "Prob. of Recession",
main = paste(c, ":", "MBoost Rolling Forecast",h,"Months with", m, "iterations"),
axes = TRUE,
ylim=c(0,1))
#Return Prediction, ROC score, time spent and the mboost model
return(list(zoo.REC,
zoo.pred,
roc(zoo.REC,zoo.pred),
time_spent,
mboost.C))
}
mb.US_h12d0_roll_travis_CV_100 <- mboost.roc_roll(forecast = 12, zoo.C_lag0 = zoo.US_lag0_berge, m = 100, country = "US",CVM = TRUE)
mb.US_h12d0_roll_travis_CV_100
gbm.US_h3d3_roll_full
gbm.US_h6d3_roll_full
gbm.US_h6d3_roll_full[[1]]
gbm.US_h6d3_roll_full[[2]]
gbm.US_h6d3_roll_full[[3]]
gbm.US_h6d3_roll_full[[4]]
write.table(gbm.US_h6d3_roll_full[[3]])
gbm.US_h6d3_roll_full[[3]]
gbm.US_h6d3_roll_full[[4]]
write.table(gbm.US_h6d3_roll_full[[4]])
write.table(gbm.US_h6d3_roll_full[[4]], file = "gbm.US_h6d3_roll_full")
setwd("~/Google Drive/Independent Work/Writing/Graphs")
write.table(gbm.US_h6d3_roll_full[[4]], file = "gbm.US_h6d3_roll_full")
write.table(gbm.US_h6d3_roll_full[[4]], file = "gbm.US_h6d3_roll_full.csv")
write.csv(gbm.US_h6d3_roll_full[[4]], file = "gbm.US_h6d3_roll_full.csv")
write.csv(gbm.US_h12d4_roll_full[[4]], file = "gbm.US_h2d4_roll_full.csv")
gbm.US_h3d0_roll_CB = gbm.roc_roll(forecast = 3, lags = 0, zoo.US_lag0_CB, run.full = TRUE, country = "US", max_m = 400)
gbm.US_h3d0_roll_CB
gbm.US_h3d0_roll_CB[[1]]
gbm.US_h3d0_roll_CB[[2]]
gbm.US_h3d0_roll_CB[[3]]
gbm.US_h3d0_roll_CB[[4]]
gbm.US_h3d0_roll_CB[[3]]
gbm.US_h3d0_roll_CB
gbm.US_h3d0_roll_CB[[3]]
gbm.US_h3d0_roll_CB[[4]]
gbm.US_h6d0_roll_CB[[4]]
gbm.US_h12d0_roll_CB[[4]]
save(gbm.US_h12d0_roll_CB[[4]])
save(gbm.US_h12d0_roll_CB[[4]], file = "gbm.US_h12d0_roll_CB")
table.csv(gbm.US_h12d0_roll_CB[[4]], file = "gbm.US_h12d0_roll_CB")
write.csv(gbm.US_h12d0_roll_CB[[4]], file = "gbm.US_h12d0_roll_CB")
write.csv(gbm.US_h12d0_roll_CB[[4]], file = "gbm.US_h12d0_roll_CB.csv")
gbm.JP_h3d0_roll_big
gbm.JP_h3d0_roll_big[[3]]
gbm.JP_h3d0_big
gbm.JP_h3d0_big[[1]]
save.csv(gbm.JP_h3d0_big[[1]])
write.csv(gbm.JP_h3d0_big[[1]])
write.csv(gbm.JP_h3d0_big[[1]], file = "gbm.JP_h3d0_big_in")
write.csv(gbm.JP_h3d0_big[[1]], file = "gbm.JP_h3d0_big_in.csv")
write.csv(gbm.JP_h3d0_short[[1]], file = "gbm.JP_h3d0_short_in.csv")
write.csv(gbm.JP_h6d0_short[[1]], file = "gbm.JP_h6d0_short_in.csv")
write.csv(gbm.JP_h12d0_short[[1]], file = "gbm.JP_h12d0_short_in.csv")
write.csv(gbm.JP_h6d0_big[[1]], file = "gbm.JP_h6d0_big_in.csv")
write.csv(gbm.JP_h12d0_big[[1]], file = "gbm.JP_h12d0_big_in.csv")
gbm.JP_h3d0_roll_big[[1]]
gbm.JP_h3d0_roll_big[[2]]
gbm.JP_h3d0_roll_big[[3]]
gbm.JP_h3d0_roll_big[[4]]
write.csv(gbm.JP_h3d0_roll_big[[4]], file = "gbm.JP_h3d0_roll_big.csv")
write.csv(gbm.JP_h6d0_roll_big[[4]], file = "gbm.JP_h6d0_roll_big.csv")
write.csv(gbm.JP_h12d0_roll_big[[4]], file = "gbm.JP_h12d0_roll_big.csv")
write.csv(gbm.JP_h3d0_roll_short[[4]], file = "gbm.JP_h3d0_roll_short.csv")
write.csv(gbm.JP_h6d0_roll_short[[4]], file = "gbm.JP_h6d0_roll_short.csv")
write.csv(gbm.JP_h12d0_roll_short[[4]], file = "gbm.JP_h12d0_roll_short.csv")
plot(gbm.JP_h3d0_roll_full[[5]], col = "black", ylab = "Number of Selected Variables", main = paste("JP: Number of Positive Variables in Forecast 3 Months"), axes = TRUE)
plot(gbm.JP_h6d0_roll_full[[5]], col = "black", ylab = "Number of Selected Variables", main = paste("JP: Number of Positive Variables in Forecast 6 Months"), axes = TRUE)
gbm.JP_h3d0_roll_big[[5]]
plot(gbm.JP_h3d0_roll_big[[5]], col = "black", ylab = "Number of Selected Variables", main = paste("JP: Number of Positive Variables in Forecast 3 Months"), axes = TRUE)
plot_zoo_REC(gbm.JP_h3d0_roll_big[[5]], country = "JP")
paste(country,":", varname, "and recession")
hi = paste(country,":", varname, "and recession")
hi
plot_zoo_REC <- function(zoo.C, varname = NULL, country, TITLE = NULL)
{
if(country == "US")
{
getSymbols("USRECD",src="FRED")
RECD = USRECD
}
else if(country == "JP")
{
getSymbols("JPNRECD",src="FRED")
RECD = JPNRECD
}
else
{
stop("No valid country name provided!")
}
if(is.null(varname))
{
varname.df <- data.frame(date= index(zoo.C), value = as.vector(zoo.C))
}
else
{
varname.df <- data.frame(date= index(zoo.C[,varname]), value = as.vector(zoo.C[,varname]))
}
start <- index(RECD[which(diff(RECD)==1)])
end   <- index(RECD[which(diff(RECD)==-1)-1])
if(country == "JP")
{
end <- c(end, as.Date("2014-12-01"))
}
else
{
end <- end[-1]
}
reccesion.df <- data.frame(start=start, end=end)
recession.df <- subset(reccesion.df, start >= min(varname.df$date))
varname.df <- subset(varname.df, date >= start[1])
if(is.null(varname))
{
varname = "EMPTY"
}
if(TITLE == NULL)
{
TITLE = paste(country,":", varname, "and recession")
}
g <- ggplot(varname.df)+
geom_line(data=varname.df, aes(x=date,y=value)) +
theme_bw() +
geom_rect(data=recession.df, aes(xmin=start,xmax=end, ymin=-Inf,ymax=+Inf), fill="red", alpha=0.5)+
xlab("Time")+
ylab(paste(varname))+
ggtitle(TITLE)
return(g)
}
plot_zoo_REC(gbm.JP_h3d0_roll_big[[5]], country = "JP")
plot_zoo_REC <- function(zoo.C, varname = NULL, country, TITLE = NULL)
{
if(country == "US")
{
getSymbols("USRECD",src="FRED")
RECD = USRECD
}
else if(country == "JP")
{
getSymbols("JPNRECD",src="FRED")
RECD = JPNRECD
}
else
{
stop("No valid country name provided!")
}
if(is.null(varname))
{
varname.df <- data.frame(date= index(zoo.C), value = as.vector(zoo.C))
}
else
{
varname.df <- data.frame(date= index(zoo.C[,varname]), value = as.vector(zoo.C[,varname]))
}
start <- index(RECD[which(diff(RECD)==1)])
end   <- index(RECD[which(diff(RECD)==-1)-1])
if(country == "JP")
{
end <- c(end, as.Date("2014-12-01"))
}
else
{
end <- end[-1]
}
reccesion.df <- data.frame(start=start, end=end)
recession.df <- subset(reccesion.df, start >= min(varname.df$date))
varname.df <- subset(varname.df, date >= start[1])
if(is.null(varname))
{
varname = "EMPTY"
}
if(is.null(TITLE))
{
TITLE = paste(country,":", varname, "and recession")
}
g <- ggplot(varname.df)+
geom_line(data=varname.df, aes(x=date,y=value)) +
theme_bw() +
geom_rect(data=recession.df, aes(xmin=start,xmax=end, ymin=-Inf,ymax=+Inf), fill="red", alpha=0.5)+
xlab("Time")+
ylab(paste(varname))+
ggtitle(TITLE)
return(g)
}
plot_zoo_REC(gbm.JP_h3d0_roll_big[[5]], country = "JP", TITLE="Japan: Positive Variables Selected by Boosting in Large Dataset")
plot_zoo_REC(gbm.JP_h3d0_roll_big[[5]], country = "JP", TITLE="Japan: Positive Variables Selected by Boosting in Large Dataset for Horizon = 3")
plot_zoo_REC(gbm.JP_h3d0_roll_big[[5]], "positive", country = "JP", TITLE="Japan: Positive Variables Selected by Boosting in Large Dataset for Horizon = 3 months")
plot_zoo_REC(gbm.JP_h3d0_roll_big[[5]], "positive variables", country = "JP", TITLE="Japan: Positive Variables Selected by Boosting in Large Dataset for Horizon = 3 months")
plot_zoo_REC(gbm.JP_h3d0_roll_big[[5]], "positive variables", country = "JP", TITLE="Japan: Positive Variables Selected by Boosting in Large Dataset for Horizon = 3 months")
plot_zoo_REC(gbm.JP_h6d0_roll_big[[5]], "positive variables", country = "JP", TITLE="Japan: Positive Variables Selected by Boosting in Large Dataset for Horizon = 6 months")
plot_zoo_REC(gbm.JP_h6d0_roll_big[[5]], "positive variables", country = "JP", TITLE="Japan: Positive Variables Selected by Boosting in Large Dataset for Horizon = 12 months")
plot_zoo_REC(gbm.JP_h12d0_roll_big[[5]], "positive variables", country = "JP", TITLE="Japan: Positive Variables Selected by Boosting in Large Dataset for Horizon = 12 months")
plot_zoo_REC(gbm.US_h3d3_roll_full[[5]], "positive variables", country = "US", TITLE="US: Positive Variables Selected by Boosting in Large Dataset for Horizon = 3 months")
plot_zoo_REC(gbm.US_h6d3_roll_full[[5]], "positive variables", country = "US", TITLE="US: Positive Variables Selected by Boosting in Large Dataset for Horizon = 6 months")
plot_zoo_REC(gbm.US_h12d4_roll_full[[5]], "positive variables", country = "US", TITLE="US: Positive Variables Selected by Boosting in Large Dataset for Horizon = 12 months")
plot_zoo_REC <- function(zoo.C, varname = NULL, country, TITLE = NULL)
{
if(country == "US")
{
getSymbols("USRECD",src="FRED")
RECD = USRECD
}
else if(country == "JP")
{
getSymbols("JPNRECD",src="FRED")
RECD = JPNRECD
}
else
{
stop("No valid country name provided!")
}
if(is.null(varname))
{
varname.df <- data.frame(date= index(zoo.C), value = as.vector(zoo.C))
}
else
{
varname.df <- data.frame(date= index(zoo.C[,varname]), value = as.vector(zoo.C[,varname]))
}
start <- index(RECD[which(diff(RECD)==1)])
end   <- index(RECD[which(diff(RECD)==-1)-1])
if(country == "JP")
{
end <- c(end, as.Date("2014-12-01"))
}
else
{
end <- end[-1]
}
reccesion.df <- data.frame(start=start, end=end)
recession.df <- subset(reccesion.df, start >= min(varname.df$date))
varname.df <- subset(varname.df, date >= start[1])
if(is.null(varname))
{
varname = "EMPTY"
}
if(is.null(TITLE))
{
TITLE = paste(country,":", varname, "and recession")
}
g <- ggplot(varname.df)+
geom_line(data=varname.df, aes(x=date,y=value)) +
theme_bw() +
geom_rect(data=recession.df, aes(xmin=start,xmax=end, ymin=-Inf,ymax=+Inf), fill="red", alpha=0.3)+
xlab("Time")+
ylab(paste(varname))+
ggtitle(TITLE)
return(g)
}
plot_zoo_REC(gbm.US_h3d3_roll_full[[5]], "positive variables", country = "US", TITLE="US: Positive Variables Selected by Boosting in Large Dataset for Horizon = 3 months")
plot_zoo_REC(gbm.US_h6d3_roll_full[[5]], "positive variables", country = "US", TITLE="US: Positive Variables Selected by Boosting in Large Dataset for Horizon = 6 months")
plot_zoo_REC(gbm.US_h12d4_roll_full[[5]], "positive variables", country = "US", TITLE="US: Positive Variables Selected by Boosting in Large Dataset for Horizon = 12 months")
plot_zoo_REC(gbm.JP_h3d0_roll_big[[5]], "positive variables", country = "JP", TITLE="Japan: Positive Variables Selected by Boosting in Large Dataset for Horizon = 3 months")
plot_zoo_REC(gbm.JP_h6d0_roll_big[[5]], "positive variables", country = "JP", TITLE="Japan: Positive Variables Selected by Boosting in Large Dataset for Horizon = 6 months")
plot_zoo_REC(gbm.JP_h12d0_roll_big[[5]], "positive variables", country = "JP", TITLE="Japan: Positive Variables Selected by Boosting in Large Dataset for Horizon = 12 months")
glm.in_US_h3[[9]]
var(glm.in_US_h3[[9]])
var(glm.in_US_h3[[9]])*2
(glm.in_US_h3[[9]])
ci(glm.in_US_h3[[9]])
var(glm.in_US_h3[[9]])
test(glm.in_US_h3[[9]],gbm.JP_h3d0_big[[3]][9])
roc.test(glm.in_US_h3[[9]],gbm.JP_h3d0_big[[3]][9])
print(glm.in_US_h3[[9]],gbm.JP_h3d0_big[[3]][9])
gbm.JP_h3d0_big[[3]][9]
glm.in_US_h3[[9]]
roc(glm.in_US_h3[[9]],gbm.JP_h3d0_big[[3]][9])
roc.test(glm.in_US_h3[[9]],gbm.JP_h3d0_big[[3]][9])
gbm.US_h12d0_roll_CB[[3]]
glm.JP_h12_roll_best[[1]]
roc.test(glm.JP_h12_roll_best[[1]],gbm.US_h12d0_roll_CB[[3]])
roc.test(gbm.US_h12d0_roll_CB[[3]],glm.JP_h12_roll_best[[1]])
roc.test(gbm.US_h6d0_roll_CB[[3]],glm.JP_h6_roll_best[[1]])
roc.test(glm.JP_h6_roll_best[[1]], gbm.US_h6d0_roll_CB[[3]],alternative = "greater")
roc.test(glm.JP_h6_roll_best[[1]], gbm.US_h6d0_roll_CB[[3]],alternative = "less")
glm.JP_h6_roll_best[[1]]
gbm.US_h6d0_roll_CB[[3]]
roc.test(glm.JP_h6_roll_best[[1]], gbm.US_h6d0_roll_CB[[3]],alternative = "greater")
roc.test(glm.JP_h6_roll_best[[1]], gbm.US_h6d0_roll_CB[[3]],alternative = "greater", method = "bootstrap")
warnings()
roc.test(glm.JP_h6_roll_best[[1]], gbm.US_h6d0_roll_CB[[3]],alternative = "greater")
roc.test(gbm.US_h3d0_roll_CB[[3]],glm.US_h3_roll_best[[1]], alternative = "greater")
roc.test(gbm.US_h12d0_roll_CB[[3]],glm.US_h12_roll_best[[1]], alternative = "less")
roc.test(gbm.US_h12d0_roll_CB[[3]],glm.US_h12_roll_best[[1]], alternative = "less")
roc.test(gbm.US_h6d0_roll_CB[[3]],glm.US_h6_roll_best[[1]], alternative = "less")
roc.test(gbm.US_h3d0_roll_CB[[3]],glm.US_h3_roll_best[[1]], alternative = "less")
roc.test(glm.US_h12_roll_best[[1]], gbm.US_h12d0_roll_CB[[3]], alternative = "greater")
roc.test(glm.US_h3_roll_best[[1]], gbm.US_h3d0_roll_CB[[3]], alternative = "greater")
roc.test(glm.US_h6_roll_best[[1]], gbm.US_h6d0_roll_CB[[3]], alternative = "greater")
roc.test(glm.US_h12_roll_best[[1]], gbm.US_h12d0_roll_CB[[3]], alternative = "greater")
roc.test(glm.US_h6_roll_best[[1]], gbm.US_h6d0_roll_CB[[3]], alternative = "greater")
roc.test(glm.US_h3_roll_best[[1]], gbm.US_h3d0_roll_CB[[3]], alternative = "greater")
roc.test(glm.US_h6_roll_best[[1]], gbm.US_h6d0_roll_CB[[3]], alternative = "greater")
roc.test(glm.US_h12_roll_best[[1]], gbm.US_h12d0_roll_CB[[3]], alternative = "greater")
roc.test(glm.US_h3_roll_best[[1]], gbm.US_h3d0_roll_CB[[3]], alternative = "greater")
roc.test(glm.US_h3_roll_best[[1]], gbm.US_h3d3_roll_full[[3]], alternative = "greater")
roc.test(glm.US_h3_roll_best[[1]], gbm.US_h3d3_roll_full[[3]], alternative = "greater")
roc.test(glm.US_h6_roll_best[[1]], gbm.US_h6d3_roll_full[[3]], alternative = "greater")
roc.test(glm.US_h12_roll_best[[1]], gbm.US_h12d4_roll_full[[3]], alternative = "greater")
glm.in_US_h3
roc.test(glm.in_US_h3, gbm.US_in_h3d3_big, alternative = "greater")
gbm.US_in_h3d3_big
gbm.US_in_h3d3_big[[3]]
roc.test(glm.in_US_h3, gbm.US_in_h3d3_big[[3]], alternative = "greater")
roc.test(glm.US_h3_roll_best[[1]], gbm.US_h3d0_roll_CB[[3]], alternative = "less")
roc.test(glm.US_h6_roll_best[[1]], gbm.US_h6d0_roll_CB[[3]], alternative = "less")
roc.test(glm.US_h12_roll_best[[1]], gbm.US_h12d0_roll_CB[[3]], alternative = "less")
roc.test(glm.in_US_h3, gbm.US_in_h3d3_big[[3]], alternative = "less")
roc.test(glm.US_h3_roll_best[[1]], gbm.US_h3d0_roll_CB[[3]], alternative = "greater")
roc.test(glm.US_h6_roll_best[[1]], gbm.US_h6d0_roll_CB[[3]], alternative = "greater")
roc.test(glm.US_h12_roll_best[[1]], gbm.US_h12d0_roll_CB[[3]], alternative = "greater")
roc.test(glm.in_US_h3, gbm.US_in_h3d3_big[[3]], alternative = "less")
roc.test(glm.in_US_h3, gbm.US_in_h3d3_big[[3]], alternative = "less")
roc.test(glm.in_US_h3, gbm.US_in_h3d3_big[[3]], alternative = "less")
roc.test(glm.in_US_h3, gbm.US_in_h3d3_big[[3]], alternative = "less")
roc.test(glm.in_US_h6, gbm.US_in_h6d3_big[[3]], alternative = "less")
roc.test(glm.in_US_h12, gbm.US_in_h12d3_big[[3]], alternative = "less")
roc.test(glm.in_US_h3, gbm.US_in_h3d3_shor[[3]], alternative = "less")
roc.test(glm.in_US_h3, gbm.US_in_h3d3_short[[3]], alternative = "less")
roc.test(glm.in_US_h3, gbm.US_in_h3d3_small[[3]], alternative = "less")
roc.test(glm.in_US_h3, gbm.US_in_h3d0_shortl[[3]], alternative = "less")
roc.test(glm.in_US_h3, gbm.US_in_h3d0_shortl[[3]], alternative = "less")
roc.test(glm.in_US_h3, gbm.US_in_h3d0_short[[3]], alternative = "less")
roc.test(glm.in_US_h3, gbm.US_in_h3d0_short[[3]], alternative = "less")
roc.test(glm.in_US_h6, gbm.US_in_h6d0_short[[3]], alternative = "less")
roc.test(glm.in_US_h12, gbm.US_in_h12d0_short[[3]], alternative = "less")
roc.test(glm.in_US_h3, gbm.US_in_h3d0_short[[3]], alternative = "less")
roc.test(glm.in_US_h6, gbm.US_in_h6d0_short[[3]], alternative = "less")
glm.in_US_h12
roc.test(glm.in_US_h12, gbm.US_in_h12d0_short[[3]], alternative = "less")
roc.test(glm.in_JP_h3, gbm.JP_in_h3d0_big[[3]], alternative = "less")
gbm.JP_in_h3d0_big
roc.test(glm.in_JP_h3, gbm.JP_in_h3_big[[3]], alternative = "less")
gbm.JP_h3d0_big]
gbm.JP_h3d0_bi
gbm.JP_h3d0_big
roc.test(glm.in_JP_h3, gbm.JP_h3_big[[3]], alternative = "less")
roc.test(glm.in_JP_h3, gbm.JP_h3d0_big[[3]], alternative = "less")
roc.test(glm.in_JP_h6, gbm.JP_h6d0_big[[3]], alternative = "less")
roc.test(glm.in_JP_h12, gbm.JP_h12d0_big[[3]], alternative = "less")
roc.test(glm.in_JP_h3, gbm.JP_h3d0_short[[3]], alternative = "less")
roc.test(glm.in_JP_h6, gbm.JP_h6d0_short[[3]], alternative = "less")
roc.test(glm.in_JP_h12, gbm.JP_h12d0_short[[3]], alternative = "less")
roc.test(glm.in_JP_h3, gbm.JP_h3d0_big[[3]], alternative = "less")
roc.test(glm.in_JP_h3, gbm.JP_h3d0_big[[3]], alternative = "less")
roc.test(glm.in_JP_h6, gbm.JP_h6d0_big[[3]], alternative = "less")
roc.test(glm.in_JP_h12, gbm.JP_h12d0_big[[3]], alternative = "less")
roc.test(glm.in_JP_h3, gbm.JP_h3d0_short[[3]], alternative = "less")
roc.test(glm.in_JP_h6, gbm.JP_h6d0_short[[3]], alternative = "less")
roc.test(glm.in_JP_h12, gbm.JP_h12d0_short[[3]], alternative = "less")
roc.test(glm.JP_h3_roll_best[[1]], gbm.JP_h3d0_roll_CB[[3]], alternative = "greater")
roc.test(glm.JP_h3_roll_best[[1]], gbm.JP_h3d0_roll_short[[3]], alternative = "greater")
roc.test(glm.JP_h3_roll_best[[1]], gbm.JP_h3d0_roll_short[[3]], alternative = "greater")
roc.test(glm.JP_h6_roll_best[[1]], gbm.JP_h6d0_roll_short[[3]], alternative = "greater")
roc.test(glm.JP_h12_roll_best[[1]], gbm.JP_h12d0_roll_short[[3]], alternative = "greater")
roc.test(glm.JP_h6_roll_best[[1]], gbm.JP_h6d0_roll_short[[3]], alternative = "greater")
roc.test(glm.JP_h12_roll_best[[1]], gbm.JP_h12d0_roll_short[[3]], alternative = "greater")
roc.test(glm.JP_h12_roll_best[[1]], gbm.JP_h12d0_roll_short[[3]], alternative = "less")
roc.test(glm.JP_h3_roll_best[[1]], gbm.JP_h3d3_roll_full[[3]], alternative = "greater")
roc.test(glm.JP_h3_roll_best[[1]], gbm.JP_h3d3_roll_big[[3]], alternative = "greater")
roc.test(glm.JP_h3_roll_best[[1]], gbm.JP_h3d0_roll_big[[3]], alternative = "greater")
roc.test(glm.JP_h3_roll_best[[1]], gbm.JP_h3d0_roll_big[[3]], alternative = "greater")
roc.test(glm.JP_h6_roll_best[[1]], gbm.JP_h6d0_roll_big[[3]], alternative = "greater")
roc.test(glm.JP_h12_roll_best[[1]], gbm.JP_h12d0_roll_big[[3]], alternative = "greater")
roc.test(glm.JP_h12_roll_best[[1]], gbm.JP_h12d0_roll_big[[3]], alternative = "greater")
roc.test(glm.JP_h12_roll_best[[1]], gbm.JP_h12d0_roll_big[[3]], alternative = "greater")
roc.test(glm.JP_h6_roll_best[[1]], gbm.JP_h6d0_roll_big[[3]], alternative = "greater")
roc.test(glm.JP_h12_roll_best[[1]], gbm.JP_h12d0_roll_big[[3]], alternative = "greater")
roc.test(glm.JP_h12_roll_best[[1]], gbm.JP_h12d0_roll_big[[3]], alternative = "greater", method = "delong")
glm.JP_h12_roll_best
gbm.JP_h12d0_roll_big
glm.JP_h12_roll_best[[3]]
glm.JP_h12d0_roll_best
glm.JP_h12d0_roll_big
gbm.JP_h12d0_roll_big
gbm.JP_h12d0_roll_big[[3]]
gbm.JP_h12d0_roll_big[[3]]
gbm.JP_h12d0_roll_big[1]
gbm.JP_h12d0_roll_big[1],gbm.JP_h12d0_roll_big[2]
roc(gbm.JP_h12d0_roll_big[1],gbm.JP_h12d0_roll_big[2])
roc(gbm.JP_h12d0_roll_big[2],gbm.JP_h12d0_roll_big[1])
gbm.JP_h12d0_roll_big[2]
gbm.JP_h12d0_roll_big[1]
roc(gbm.JP_h12d0_roll_big[[2]],gbm.JP_h12d0_roll_big[[1]])
roc(gbm.JP_h12d0_roll_big[[1]],gbm.JP_h12d0_roll_big[[2]], direction="<")
roc_JP_h12_big = roc(gbm.JP_h12d0_roll_big[[1]],gbm.JP_h12d0_roll_big[[2]], direction="<")
roc_JP_h12_big
roc_JP_h12_big[[1]]
roc_JP_h12_big[[2]]
roc_JP_h12_big[[3]]
roc_JP_h12_big[[8]]
roc_JP_h12_big[[9]]
plot_zoo_obj(gbm.JP_h12d0_roll_big[[2]],
roc = roc_JP_h12_big[[9]],
horizon = 12,
IN = FALSE,
LARGE = TRUE)
JP_out_boost_big_h12 <- plot_zoo_obj(gbm.JP_h12d0_roll_big[[2]],
roc = roc_JP_h12_big[[9]],
horizon = 12,
IN = FALSE,
LARGE = TRUE)
JP_out_boost_big_h12 <- plot_zoo_obj(gbm.JP_h12d0_roll_big[[2]],
roc = roc_JP_h12_big[[9]],
horizon = 12,
IN = FALSE,
LARGE = TRUE)
roc.test(glm.JP_h12_roll_best[[1]], groc_JP_h12_big[9], alternative = "greater")
roc.test(glm.JP_h12_roll_best[[1]], roc_JP_h12_big[9], alternative = "greater")
roc_JP_h12_big
roc_JP_h12_big[9]
roc.test(glm.JP_h12_roll_best[[1]], roc_JP_h12_big, alternative = "greater")
roc.test(glm.US_h6_roll_best[[1]], gbm.US_h6d0_roll_CB[[3]], alternative = "greater")
roc.test(glm.US_h6_roll_best[[1]], gbm.US_h6d3_roll_full[[3]], alternative = "greater")
roc.test(glm.US_h3_roll_best[[1]], gbm.US_h3d3_roll_full[[3]], alternative = "greater")
roc.test(glm.US_h6_roll_best[[1]], gbm.US_h6d3_roll_full[[3]], alternative = "greater")
roc.test(glm.US_h12_roll_best[[1]], gbm.US_h12d4_roll_full[[3]], alternative = "greater")
roc.test(glm.US_h3_roll_best[[1]], gbm.US_h3d3_roll_full[[3]], alternative = "greater")
roc.test(glm.US_h6_roll_best[[1]], gbm.US_h6d3_roll_full[[3]], alternative = "greater")
roc.test(glm.US_h12_roll_best[[1]], gbm.US_h12d4_roll_full[[3]], alternative = "greater")
roc.test(glm.US_h3_roll_best[[1]], gbm.US_h3d0_roll_CB[[3]], alternative = "greater")
roc.test(glm.US_h6_roll_best[[1]], gbm.US_h6d0_roll_CB[[3]], alternative = "greater")
roc.test(glm.US_h12_roll_best[[1]], gbm.US_h12d0_roll_CB[[3]], alternative = "greater")
roc.test(gbm.US_h3d3_roll_full[[3]], gbm.US_h3d0_roll_CB[[3]], alternative = "greater")
roc.test(gbm.US_in_h3d3_big[[3]] > gbm.US_in_h3d0_short[[3]], alternative = "less")
roc.test(gbm.US_in_h3d3_big[[3]], gbm.US_in_h3d0_short[[3]], alternative = "less")
roc.test(gbm.US_in_h3d3_big[[3]], gbm.US_in_h3d0_short[[3]], alternative)
roc.test(gbm.US_in_h3d3_big[[3]], gbm.US_in_h3d0_short[[3]])
roc.test(gbm.US_in_h3d3_big[[3]], gbm.US_in_h3d0_short[[3]], alternative = "greater")
roc.test(gbm.US_in_h6d3_big[[3]], gbm.US_in_h6d0_short[[3]], alternative = "greater")
roc.test(gbm.US_in_h12d4_big[[3]], gbm.US_in_h12d0_short[[3]], alternative = "greater")
roc.test(gbm.US_in_h3d3_big[[3]], gbm.US_in_h3d0_short[[3]], alternative = "greater")
roc.test(gbm.US_in_h12d4_big[[3]], gbm.US_in_h12d0_short[[3]], alternative = "greater")
roc.test(gbm.US_in_h12d3_big[[3]], gbm.US_in_h12d0_short[[3]], alternative = "greater")
gbm.US_in_h12d4_big = gbm.forecast_lag(12,4,zoo.US_lag0_big, "US", "bernoulli", train = 1.0)
roc.test(gbm.US_in_h3d3_big[[3]], gbm.US_in_h3d0_short[[3]], alternative = "greater")
roc.test(gbm.US_in_h6d3_big[[3]], gbm.US_in_h6d0_short[[3]], alternative = "greater")
roc.test(gbm.US_in_h12d3_big[[3]], gbm.US_in_h12d0_short[[3]], alternative = "greater")
roc.test(gbm.US_in_h6d3_big[[3]], gbm.US_in_h6d0_short[[3]], alternative = "greater")
roc.test(gbm.US_in_h3d3_big[[3]], gbm.US_in_h3d0_short[[3]], alternative = "greater")
roc.test(gbm.US_in_h6d3_big[[3]], gbm.US_in_h6d0_short[[3]], alternative = "greater")
roc.test(gbm.US_h3d3_roll_full[[3]], gbm.US_h3d0_roll_CB[[3]], alternative = "less")
roc.test(gbm.US_h6d3_roll_full[[3]], gbm.US_h6d0_roll_CB[[3]], alternative = "less")
roc.test(gbm.US_h12d4_roll_full[[3]], gbm.US_h12d0_roll_CB[[3]], alternative = "less")
roc.test(gbm.US_h6d3_roll_full[[3]], gbm.US_h6d0_roll_CB[[3]], alternative = "less")
roc.test(gbm.US_h3d3_roll_full[[3]], gbm.US_h3d0_roll_CB[[3]], alternative = "less")
roc.test(gbm.JP_h3d0_big[[3]], gbm.JP_h3d0_short[[3]], alternative = "less")
roc.test(gbm.JP_h6d0_big[[3]], gbm.JP_h6d0_short[[3]], alternative = "less")
roc.test(gbm.JP_h12d0_big[[3]], gbm.JP_h12d0_short[[3]], alternative = "less")
roc.test(gbm.JP_h3d0_big[[3]], gbm.JP_h3d0_short[[3]], alternative = "greater")
roc.test(gbm.JP_h6d0_big[[3]], gbm.JP_h6d0_short[[3]], alternative = "greater")
roc.test(gbm.JP_h12d0_big[[3]], gbm.JP_h12d0_short[[3]], alternative = "greater")
roc.test(gbm.JP_h3d0_big[[3]], gbm.JP_h3d0_short[[3]], alternative = "greater")
roc.test(gbm.JP_h6d0_big[[3]], gbm.JP_h6d0_short[[3]], alternative = "greater")
roc.test(gbm.JP_h12d0_big[[3]], gbm.JP_h12d0_short[[3]], alternative = "greater")
roc.test(gbm.JP_h3d0_roll_short[[3]], gbm.JP_h3d0_roll_big[[3]], alternative = "greater")
roc.test(gbm.JP_h3d0_roll_short[[3]], gbm.JP_h3d0_roll_big[[3]], alternative = "greater")
roc.test(gbm.JP_h6d0_roll_short[[3]], gbm.JP_h6d0_roll_big[[3]], alternative = "greater")
roc.test(gbm.JP_h12d0_roll_short[[3]], gbm.JP_h12d0_roll_big[[3]], alternative = "greater")
roc.test(gbm.JP_h3d0_roll_short[[3]], gbm.JP_h3d0_roll_big[[3]], alternative = "greater")
roc.test(gbm.JP_h3d0_roll_short[[3]], gbm.JP_h3d0_roll_big[[3]], alternative = "less")
roc.test(gbm.JP_h6d0_roll_short[[3]], gbm.JP_h6d0_roll_big[[3]], alternative = "greater")
roc.test(gbm.JP_h12d0_roll_short[[3]], gbm.JP_h12d0_roll_big[[3]], alternative = "greater")
gbm.JP_h12d0_roll_big
gbm.JP_h12d0_roll_big[[3]]
gbm.JP_h12d0_roll_big[1]
roc.test(gbm.US_h3d3_roll_full[[3]], gbm.US_h3d0_roll_CB[[3]], alternative = "less")
roc.test(gbm.JP_h12d0_roll_short[[3]], roc_JP_h12_big[[3]], alternative = "greater")
roc.test(gbm.JP_h12d0_roll_short[[3]], roc_JP_h12_big, alternative = "greater")
elapsedMonths
elapsed_months("2014-09-01", "1985-09-01")
elapsed_months(train_end, train_start)
gbm.US_h3d3_roll_full
gbm.US_h3d3_roll_full[1]
gbm.US_h3d3_roll_full[3]
gbm.US_h3d3_roll_full[1]
roc(gbm.US_h3d3_roll_full[1],gbm.US_h3d3_roll_full[2], direction="<")
roc(gbm.US_h3d3_roll_full[[1]],gbm.US_h3d3_roll_full[[2]], direction="<")
roc(gbm.US_h3d3_roll_full[[1]],gbm.US_h3d3_roll_full[[2]], direction=">")
roc(gbm.US_h3d3_roll_full[[1]],gbm.US_h3d3_roll_full[[2]], direction="<")
getwd()
setwd("~/Google Drive/Independent Work/Code")
save.image()
ls
cwd
getwd
save.image()
setwd("~/Google Drive/Independent Work/Code/Saved Workspaces")
save.image()
save.image("4152015.RData")
